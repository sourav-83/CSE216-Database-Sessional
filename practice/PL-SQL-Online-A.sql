CREATE
OR REPLACE PROCEDURE LONGEST_SERVING_EMPLOYEE (REG_NAME IN VARCHAR2) IS NAME VARCHAR2 (100);
JOB VARCHAR2 (100);
HIRE DATE;
COUNTRY VARCHAR2 (1000);
CT VARCHAR2 (100);
BEGIN
  HIRE := SYSDATE;
  FOR R IN (
      SELECT
        E.FIRST_NAME,
        E.LAST_NAME,
        E.HIRE_DATE,
        E.JOB_ID,
        D.DEPARTMENT_ID,
        L.CITY,
        C.COUNTRY_NAME,
        RGN.REGION_NAME
      FROM
        EMPLOYEES E
        JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
        JOIN LOCATIONS L ON (D.LOCATION_ID = L.LOCATION_ID)
        JOIN COUNTRIES C ON (L.COUNTRY_ID = C.COUNTRY_ID)
        JOIN REGIONS RGN ON (C.REGION_ID = RGN.REGION_ID) WHERE RGN.REGION_NAME = REG_NAME
    )
    LOOP
    IF (R.HIRE_DATE < HIRE) THEN
      NAME := R.FIRST_NAME || ' ' || R.LAST_NAME;
      JOB := R.JOB_ID;
      HIRE := R.HIRE_DATE;
      COUNTRY := R.COUNTRY_NAME;
      CT := R.CITY;
    END IF;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('Longest Serving Employee: ' || NAME);
  DBMS_OUTPUT.PUT_LINE('Job: ' || JOB);
  DBMS_OUTPUT.PUT_LINE('Hired On: ' || TO_CHAR(HIRE, 'YYYY-MM-DD'));
  DBMS_OUTPUT.PUT_LINE('Country: ' || COUNTRY);
  DBMS_OUTPUT.PUT_LINE('City: ' || CT);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('ERROR');
  END;
  
  ---
  
  BEGIN
  LONGEST_SERVING_EMPLOYEE('Americas');
  END;
  
  
  ---
  
  CREATE
  OR REPLACE PROCEDURE RANK_JOBS IS NUM NUMBER;
  BEGIN
    NUM := 1;
    FOR R IN (
        SELECT
          J.JOB_TITLE,
          COUNT(E.EMPLOYEE_ID) C,
          AVG(E.SALARY) AVG_SAL,
          MAX(E.SALARY) MAX_SAL,
          MIN(E.SALARY) MIN_SAL
        FROM
          JOBS J
          JOIN EMPLOYEES E ON (E.JOB_ID = J.JOB_ID)
        GROUP BY
          J.JOB_TITLE
      )
      LOOP
      DBMS_OUTPUT.PUT_LINE ('Rank: ' || NUM);
      DBMS_OUTPUT.PUT_LINE ('---------');
      DBMS_OUTPUT.PUT_LINE ('Employees ' || R.C);
      DBMS_OUTPUT.PUT_LINE ('Job Title: ' || R.JOB_TITLE);
      DBMS_OUTPUT.PUT_LINE ('Avg Salary: ' || R.AVG_SAL);
      DBMS_OUTPUT.PUT_LINE ('Max Salary: ' || R.MAX_SAL);
      DBMS_OUTPUT.PUT_LINE ('Min Salary: ' || R.MIN_SAL);
      DBMS_OUTPUT.PUT_LINE('');
      NUM := NUM+1;
    END LOOP;
  END;
  
  
  ---
  
  BEGIN
  RANK_JOBS;
  END;
  
  ---
  
  CREATE TABLE LEAVES (EMPLOYEE_ID NUMBER, EMPLOYEE_WORKING_INSTEAD NUMBER, CURRENT_DATE DATE);

--- 
  
CREATE OR REPLACE TRIGGER T
AFTER DELETE ON EMPLOYEES
FOR EACH ROW
DECLARE
  ID             NUMBER;
  MANAGER        NUMBER;
  REPLACEMENT_ID NUMBER := -1;
  IS_MANAGER     NUMBER := 0;
  GAP            NUMBER := 10000;
  SUB_COUNT      NUMBER := 0;
  TMP_COUNT      NUMBER;
BEGIN
  ID := :OLD.EMPLOYEE_ID;
  MANAGER := :OLD.MANAGER_ID;

  
  SELECT COUNT(*) INTO TMP_COUNT
  FROM EMPLOYEES
  WHERE MANAGER_ID = ID;

  IF TMP_COUNT > 0 THEN
    IS_MANAGER := 1;
  END IF;

  IF IS_MANAGER = 0 AND MANAGER IS NOT NULL THEN
    
    FOR R IN (
      SELECT EMPLOYEE_ID, SALARY
      FROM EMPLOYEES
      WHERE MANAGER_ID = MANAGER
    )
    LOOP
      IF GAP > ABS(:OLD.SALARY - R.SALARY) THEN
        REPLACEMENT_ID := R.EMPLOYEE_ID;
        GAP := ABS(:OLD.SALARY - R.SALARY);
      END IF;
    END LOOP;

  ELSIF IS_MANAGER = 1 AND MANAGER IS NULL THEN
    
    SELECT COUNT(*) INTO SUB_COUNT
    FROM EMPLOYEES
    WHERE MANAGER_ID = ID;

    FOR R IN (
      SELECT M.EMPLOYEE_ID, COUNT(E.EMPLOYEE_ID) AS EMP
      FROM EMPLOYEES M
      JOIN EMPLOYEES E ON E.MANAGER_ID = M.EMPLOYEE_ID
      WHERE M.EMPLOYEE_ID <> ID
      GROUP BY M.EMPLOYEE_ID
    )
    LOOP
      IF GAP > ABS(SUB_COUNT - R.EMP) THEN
        GAP := ABS(SUB_COUNT - R.EMP);
        REPLACEMENT_ID := R.EMPLOYEE_ID;
      END IF;
    END LOOP;
  END IF;

  
  IF REPLACEMENT_ID = -1 THEN
    INSERT INTO LEAVES VALUES (ID, NULL, SYSDATE);
  ELSE
    INSERT INTO LEAVES VALUES (ID, REPLACEMENT_ID, SYSDATE);
  END IF;
END;
/

    
    ---
    BEGIN
      DELETE
      FROM
        EMPLOYEES
      WHERE
        EMPLOYEE_ID = 183;
    END;
    
    
    ---
    
    SELECT * FROM LEAVES;
        

  
  