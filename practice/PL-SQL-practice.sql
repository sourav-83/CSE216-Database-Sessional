BEGIN
  DBMS_OUTPUT.PUT_LINE ('HELLO WORLD');
END;

---

DECLARE NAME VARCHAR2 (100);
BEGIN
  SELECT
    (FIRST_NAME || ' ' || LAST_NAME) INTO NAME
  FROM
    EMPLOYEES
  WHERE
    EMPLOYEE_ID = 100;
    DBMS_OUTPUT.PUT_LINE ('THE NAME IS : ' || NAME);
END;

---

DECLARE JDATE DATE;
MONTHS NUMBER;
BEGIN
  SELECT
    HIRE_DATE INTO JDATE
  FROM
    EMPLOYEES
  WHERE
    EMPLOYEE_ID = 100;
    MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, JDATE), 0);
    DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE WORKED : ' || MONTHS || ' MONTHS');
END;

---

DECLARE JDATE DATE;
YEARS NUMBER;
BEGIN
  SELECT
    HIRE_DATE INTO JDATE
  FROM
    EMPLOYEES
  WHERE
    EMPLOYEE_ID = 100;
    YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE) / 12);
    IF YEARS >= 10 THEN
      DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE WORKED 10 YEARS OR MORE');
      ELSIF YEARS >= 5 THEN
      DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE WORKED 5 YEARS OR MORE');
    ELSE
      DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE WORKED LESS THAN 5 YEARS');
    END IF;
END;

---

DECLARE JDATE DATE;
YEARS NUMBER;
BEGIN
  SELECT
    HIRE_DATE INTO JDATE
  FROM
    EMPLOYEES
  WHERE
    EMPLOYEE_ID = 100;
    YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE) / 12);
    IF YEARS >= 10 THEN
      DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE WORKED 10 YEARS OR MORE');
      ELSIF YEARS >= 5 THEN
      DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE WORKED 5 YEARS OR MORE');
    ELSE
      DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE WORKED LESS THAN 5 YEARS');
    END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE ('THE EMPLOYEE DOES NOT EXIST');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('I DO NOT KNOW WHAT THE HELL HAPPENED!');
  END;
  
  ---
  
  DECLARE
  BEGIN
    FOR i IN 1..100
      LOOP
      DBMS_OUTPUT.PUT_LINE (i);
    END LOOP;
  END;
  
  ---
  
  DECLARE i NUMBER;
  BEGIN
    i := 0;
    WHILE i < 100
    LOOP
    DBMS_OUTPUT.PUT_LINE (i);
    i := i + 1;
  END LOOP;
END;

---

DECLARE i NUMBER;
BEGIN
  i := 0;
  LOOP
  DBMS_OUTPUT.PUT_LINE (i);
  i := i + 1;
  EXIT
  WHEN (i = 100);
  END LOOP;
END;

---

DECLARE YEARS NUMBER;
COUNTER NUMBER;
BEGIN
  COUNTER := 0;
  FOR R IN (SELECT HIRE_DATE FROM EMPLOYEES)
    LOOP
    YEARS := (MONTHS_BETWEEN(SYSDATE, R.HIRE_DATE) / 12);
    IF YEARS >= 10 THEN
      COUNTER := COUNTER + 1;
    END IF;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE ('NUMBER OF EMPLOYEES WORKING FOR 10 YEARS OR MORE : ' || COUNTER);
END;

---

DECLARE YEARS NUMBER;
COUNTER NUMBER;
OLD_SAL NUMBER;
NEW_SAL NUMBER;
BEGIN
  FOR R IN (SELECT EMPLOYEE_ID, SALARY, HIRE_DATE FROM EMPLOYEES)
    LOOP
    OLD_SAL := R.SALARY;
    YEARS := (MONTHS_BETWEEN(SYSDATE, R.HIRE_DATE) / 12);
    IF YEARS >= 10 THEN
      UPDATE EMPLOYEES
      SET SALARY = SALARY * 1.15
      WHERE
        EMPLOYEE_ID = R.EMPLOYEE_ID;
    END IF;
    SELECT
      SALARY INTO NEW_SAL
    FROM
      EMPLOYEES
    WHERE
      EMPLOYEE_ID = R.EMPLOYEE_ID;
      DBMS_OUTPUT.PUT_LINE ('Employee id: ' || R.EMPLOYEE_ID || ' Salary: ' || OLD_SAL || ' -> ' || NEW_SAL);
  END LOOP;
  COMMIT;
END;

---

CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE IS 
JDATE DATE;
YEARS NUMBER;
BEGIN
SELECT HIRE_DATE INTO JDATE FROM EMPLOYEES WHERE EMPLOYEE_ID = 100;
YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE)/12);
IF YEARS >= 10 THEN DBMS_OUTPUT.PUT_LINE('The employee worked 10 years or more');
ELSE  DBMS_OUTPUT.PUT_LINE('The employee worked less than 10 years');
END IF;
END;
/

---

BEGIN
IS_SENIOR_EMPLOYEE();
END;

---

CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE_2(ID IN NUMBER, YEAR IN NUMBER) IS 
JDATE DATE;
YEARS NUMBER;
BEGIN
SELECT HIRE_DATE INTO JDATE FROM EMPLOYEES WHERE EMPLOYEE_ID = ID;
YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE)/12);
IF YEARS >= YEAR THEN DBMS_OUTPUT.PUT_LINE('The employee worked ' || YEAR || ' years or more');
ELSE  DBMS_OUTPUT.PUT_LINE('The employee worked less than ' || YEAR ||  ' years');
END IF;
END;
/

---

BEGIN
IS_SENIOR_EMPLOYEE_2(100,83);
END;

---

CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE_3(ID IN NUMBER, YEAR IN NUMBER) IS 
JDATE DATE;
YEARS NUMBER;
BEGIN
SELECT HIRE_DATE INTO JDATE FROM EMPLOYEES WHERE EMPLOYEE_ID = ID;
YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE)/12);
IF YEARS >= YEAR THEN DBMS_OUTPUT.PUT_LINE('The employee worked ' || YEAR || ' years or more');
ELSE  DBMS_OUTPUT.PUT_LINE('The employee worked less than ' || YEAR ||  ' years');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Employee does not exist');
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('idk fr fr');
END;
/

---

BEGIN
IS_SENIOR_EMPLOYEE_3(100,83);
END;

---

CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE_4(ID IN NUMBER, YEAR IN NUMBER, MSG OUT VARCHAR2) IS 
JDATE DATE;
YEARS NUMBER;
BEGIN
SELECT HIRE_DATE INTO JDATE FROM EMPLOYEES WHERE EMPLOYEE_ID = ID;
YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE)/12);
IF YEARS >= YEAR THEN MSG := 'The employee worked ' || YEAR || ' years or more';
ELSE  MSG:= 'The employee worked less than ' || YEAR ||  ' years';
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN MSG := 'Employee does not exist';
WHEN OTHERS THEN MSG := 'idk fr fr';
END;
/

---

DECLARE MSG VARCHAR2(100);
BEGIN
IS_SENIOR_EMPLOYEE_4(100,83,MSG);
DBMS_OUTPUT.PUT_LINE(MSG);
END;

---

CREATE OR REPLACE FUNCTION GET_SENIOR_EMPLOYEE(EID IN VARCHAR2)
RETURN VARCHAR2 IS 
JDATE DATE;
YEARS NUMBER;
MSG VARCHAR2(100);
BEGIN
SELECT HIRE_DATE INTO JDATE FROM EMPLOYEES WHERE EMPLOYEE_ID = EID;
YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE)/12); 
IF YEARS >= 10 THEN MSG := 'The employee worked 10 years or more';
ELSE  MSG := 'The employee worked less than 10 years';
END IF;
RETURN MSG;
EXCEPTION
WHEN NO_DATA_FOUND THEN RETURN 'Employee does not exist';
WHEN OTHERS THEN RETURN 'idk fr fr';
END;
/

---

DECLARE MSG VARCHAR2(100);
BEGIN
MSG := GET_SENIOR_EMPLOYEE(100);
DBMS_OUTPUT.PUT_LINE(MSG);
END;

---

     CREATE OR REPLACE FUNCTION GET_SENIOR_EMPLOYEE_2(EID IN NUMBER)
RETURN VARCHAR2 IS
  ECOUNT NUMBER;
  JDATE DATE;
  YEARS NUMBER;
  MSG VARCHAR2(100);
BEGIN
  -- Nested block to get employee count
  BEGIN
    SELECT COUNT(*) INTO ECOUNT
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = EID;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Error checking employee count.';
  END;

  -- Decision logic
  IF ECOUNT = 0 THEN
    MSG := 'No employee found.';
  ELSIF ECOUNT > 1 THEN
    MSG := 'More than one employee found.';
  ELSE
    BEGIN
      SELECT HIRE_DATE INTO JDATE
      FROM EMPLOYEES
      WHERE EMPLOYEE_ID = EID;

      YEARS := MONTHS_BETWEEN(SYSDATE, JDATE) / 12;

      IF YEARS >= 10 THEN
        MSG := 'The employee worked 10 years or more';
      ELSE
        MSG := 'The employee worked less than 10 years';
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        MSG := 'Hire date not found.';
      WHEN OTHERS THEN
        MSG := 'Unexpected error retrieving hire date.';
    END;
  END IF;

  RETURN MSG;
END;
/

      
    ---
    
DECLARE MSG VARCHAR2(100);
BEGIN
MSG := GET_SENIOR_EMPLOYEE_2(100);
DBMS_OUTPUT.PUT_LINE(MSG);
END;

---


CREATE TABLE EMPLOYEE_UPDATE_TABLE(
EMPLOYEE_ID NUMBER,
USERNAME VARCHAR2(100),
DATETIME DATE
);

---

CREATE OR REPLACE TRIGGER EMPLOYEE_UPDATE
BEFORE UPDATE ON EMPLOYEES
FOR EACH ROW
DECLARE
ID NUMBER;
DATETIME DATE;
USERNAME VARCHAR2(100);
BEGIN
ID := :OLD.EMPLOYEE_ID;
DATETIME := SYSDATE;
USERNAME := USER;
INSERT INTO EMPLOYEE_UPDATE_TABLE VALUES(ID,USERNAME,DATETIME);
END;

---

UPDATE EMPLOYEES SET SALARY=83000 WHERE EMPLOYEE_ID = 103;

---

SELECT * FROM EMPLOYEE_UPDATE_TABLE;



































