CREATE OR REPLACE FUNCTION  Exchange_Employees (M1 IN NUMBER, M2 IN NUMBER) RETURN NUMBER 
DECLARE
E1 NUMBER;
E2 NUMBER;
S1 NUMBER := 100000;
S2 NUMBER := 100000;
J1 NUMBER;
J2 NUMBER;
DIFF NUMBER;
NAME1 VARCHAR2(100);
NAME2 VARCHAR2(100);
EMAIL1 VARCHAR2(100);
EMAIL2 VARCHAR2(100);
PHONE1 VARCHAR2(100);
PHONE2 VARCHAR2(100);
H1 DATE;
H2 DATE;
NEXT_S1 NUMBER;
NEXT_S2 NUMBER;
D1 NUMBER;
D2 NUMBER;
BEGIN
FOR R IN (SELECT * FROM EMPLOYEES_COPY WHERE MANAGER_ID = M1)
LOOP
IF R.SALARY < S1 THEN E1 := R.EMPLOYEE_ID; S1 := R.SALARY; J1 := R.JOB_ID; NAME1 := R.FIRST_NAME || ' ' || R.LAST_NAME; EMAIL1 := R.EMAIL; PHONE1 := R.PHONE_NUMBER; H1 := R.HIRE_DATE; D1 := R.DEPARTMENT_ID;
END IF;
END LOOP;
FOR R IN (SELECT * FROM EMPLOYEES WHERE MANAGER_ID = M2)
LOOP
IF R.SALARY < S2 THEN E2 := R.EMPLOYEE_ID; S2 := R.SALARY; J2 := R.JOB_ID; NAME2 := R.FIRST_NAME || ' ' || R.LAST_NAME; EMAIL2 := R.EMAIL; PHONE2 := R.PHONE_NUMBER; H2 := R.HIRE_DATE; D2 := R.DEPARTMENT_ID;
END IF;
END LOOP;
DIFF := ABS(S1-S2)
NEXT_S1 := S1 + .5 * DIFF;
NEXT_S2 := S2 + .5 * DIFF;
DBMS_OUTPUT.PUT_LINE('BEFORE EXCHANGE_EMPLOYEES');
DBMS_OUTPUT.PUT_LINE('EMPLOYEE_ID: ' || E1);
DBMS_OUTPUT.PUT_LINE('NAME: ' || NAME1);
DBMS_OUTPUT.PUT_LINE('EMAIL: ' || EMAIL1);
DBMS_OUTPUT.PUT_LINE('HIRE_DATE: ' || H1);
DBMS_OUTPUT.PUT_LINE('JOB_ID: ' || J1);
DBMS_OUTPUT.PUT_LINE('MANAGER ID: ' || M1);
DBMS_OUTPUT.PUT_LINE('AFTER EXCHANGE_EMPLOYEES');
DBMS_OUTPUT.PUT_LINE('EMPLOYEE_ID: ' || E2);
DBMS_OUTPUT.PUT_LINE('NAME: ' || NAME2);
DBMS_OUTPUT.PUT_LINE('EMAIL: ' || EMAIL2);
DBMS_OUTPUT.PUT_LINE('HIRE_DATE: ' || H2);
DBMS_OUTPUT.PUT_LINE('JOB_ID: ' || J2);
DBMS_OUTPUT.PUT_LINE('MANAGER ID: ' || M2);
UPDATE EMPLOYEES_COPY SET MANAGER_ID = M2, SALARY = NEXT_S1,  DEPARTMENT_ID := D1; WHERE EMPLOYEE_ID = E1;
UPDATE EMPLOYEES_COPY SET MANAGER_ID = M1, SALARY = NEXT_S2,  DEPARTMENT_ID := D2; WHERE EMPLOYEE_ID = E2;
EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR');
RETURN 1;
END;
/

---

CREATE OR REPLACE PROCEDURE LOCATION_SALARY_REPORT 
DECLARE NUM NUMBER := 1;
H_EMP NUMBER := 0;
JT := VARCHAR2(100);
HSAL NUMBER := 0;
BEGIN
FOR R IN (SELECT L.CITY, E.COUNT(*) EMP, E.AVG(SALARY) AVG_SAL FROM EMPLOYEES E JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID) JOIN LOCATIONS L ON (D.LOCATION_ID = L.LOCATION_ID) GROUP BY L.CITY )
LOOP
FOR S IN (SELECT J.JOB_TITLE, E2.SALARY FROM LOCATIONS L2 JOIN DEPARTMENTS D2 ON (D2.LOCATION_ID = L2.LOCATION_ID) JOIN EMPLOYYES E2 ON (E2.DEPARTMENT_ID = D2.DEPARTMENT_ID) JOIN JOBS J ON (E2.JOB_ID = J.JOB_ID) WHERE L2.CITY = R.CITY)
LOOP
IF S.SALARY > HSAL THEN JT := S.JOB_TITLE; HSAL := S.SALARY;
END IF;
END LOOP;

DBMS_OUTPUT.PUT_LINE('RANK: ' || NUM || ' CITY: ' || R.CITY || ' EMPLOYEES: ' || R.EMP || ' AVG SALARY: ' || R. AVG_SAL || ' HIGHEST PAYING JOB: ' || JT);
NUM := NUM+1;
END LOOP;
END;


---

CREATE TABLE Transfers
(
employee_id NUMBER ,
employee_working_instead NUMBER,
new_department NUMBER,
current_date DATE
);

---

CREATE OR REPLACE TRIGGER  T1 AFTER UPDATE OF DEPARTMENT_ID ON EMPLOYEES FOR EACH ROW
DECLARE
IS_MANAGER NUMBER := 0;
MANAGER NUMBER;
GAP NUMBER := 100000;
EID NUMBER;
PREV_SAL NUMBER;
NEW_SAL NUMBER;
NEW_MANAGER NUMBER;
SUB NUMBER;
BEGIN
IF :OLD.MANAGER_ID IS NOT NULL THEN IS_MANAGER := 1;
END IF;
IF IS_MANAGER = 1 THEN
MANAGER := :OLD.MANAGER_ID;
FOR R IN (SELECT * FROM EMPLOYEES WHERE MANAGER_ID = MANAGER AND EMPLOYEE_ID <> :OLD.EMPLOYEE_ID)
LOOP
IF GAP > ABS(:OLD.SALARY - R.SALARY) THEN EID := R.EMPLOYEE_ID; GAP :=  ABS(:OLD.SALARY - R.SALARY); PREV_SAL := R.SALARY;
END IF;
END LOOP;
NEW_SAL := PREV_SAL + .5 * :OLD.SALARY;
SELECT COUNT(E.EMPLOYEE_ID) INTO SUB FROM EMPLOYEES E JOIN EMPLOYEES E2 ON (E2.EMPLOYEE_ID = E.MANAGER_ID) WHERE E2.EMPLOYEE_ID = :OLD.MANAGER_ID;

UPDATE EMPLOYEES SET SALARY = NEW_SAL WHERE EMPLOYEE_ID = EID;



INSERT INTO TRANSFERS VALUES(:OLD.EMPLOYEE_ID, EID, :NEW.DEPARTMENT_ID, SYSDATE);
END IF;
END;
/


